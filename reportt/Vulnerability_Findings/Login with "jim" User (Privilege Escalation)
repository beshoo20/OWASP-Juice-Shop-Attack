What happened:
We started by logging in to the application with the "jim" user’s email and an incorrect password. Using Burp Suite, we intercepted the login request and noticed that the application didn’t properly handle SQL queries. We then performed a SQL injection attack on the username field to retrieve the correct password for the "jim" user.

Why it’s a problem:
SQL injection allows an attacker to manipulate the application's SQL queries. If user inputs are not properly sanitized, attackers can craft malicious input to retrieve sensitive data, such as user passwords, from the database. This is a serious security issue because it gives attackers access to user accounts, including potentially admin-level accounts.

Proof:
By sending SQL injection payloads in the username field, we were able to bypass the login mechanism and retrieve the correct password for the "jim" user. This allowed us to log in with the "jim" credentials and access areas of the application that should be restricted.

Fix:
To fix this vulnerability, the application should use prepared statements or parameterized queries to prevent SQL injection. Input validation and sanitization should also be implemented to ensure that user inputs do not interfere with the database query structure.
